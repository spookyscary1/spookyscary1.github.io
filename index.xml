<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>spook's blog</title><link>https://spookyscary1.github.io/</link><description>Recent content on spook's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Sun, 15 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://spookyscary1.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Dawn writeup but with slightly more programming</title><link>https://spookyscary1.github.io/posts/2022/05/dawn-writeup-but-with-slightly-more-programming/</link><pubDate>Sun, 15 May 2022 00:00:00 +0000</pubDate><guid>https://spookyscary1.github.io/posts/2022/05/dawn-writeup-but-with-slightly-more-programming/</guid><description>intro / rules Welcome to the first of hopefully a series of blog posts. The goal of
this post is to explain the rules of the challenge I have created for
myself. The goal is to solve Boot2Root style VMs while writing as many
custom tools as possible. There are a few categories of tools that I
have semi arbitrarily declared safe for use during the challenge. These
tools include the following:</description></item><item><title>Rop writeups ret2win-write41</title><link>https://spookyscary1.github.io/posts/2022/05/rop-writeups-ret2win-write41/</link><pubDate>Sun, 15 May 2022 00:00:00 +0000</pubDate><guid>https://spookyscary1.github.io/posts/2022/05/rop-writeups-ret2win-write41/</guid><description>While attempting to solve a CTF for a job interview, I learned the basics of crafting return-oriented programming exploits. This knowledge inspired me to create a write up for a few challenges that involve ROP from ROP Emporium.
introduction to Rop Return-oriented programming can be thought of as an advanced form of buffer overflow. The basic buffer overflow involves gaining control of the instruction pointer and then pointing it to shellcode code added to the stack.</description></item><item><title>About</title><link>https://spookyscary1.github.io/about/</link><pubDate>Tue, 17 May 2022 00:00:00 +0000</pubDate><guid>https://spookyscary1.github.io/about/</guid><description>I recently graduated with a bachelor&amp;rsquo;s degree in Cyber Operations. I am OSCP certified and currently looking to become a penetration tester. This blog is a place where I will document things I have learned as I attempt to enter the field.</description></item></channel></rss>